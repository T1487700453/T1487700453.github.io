<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试插入图片</title>
      <link href="2020/11/17/ce-shi/ce-shi-cha-ru-tu-pian/"/>
      <url>2020/11/17/ce-shi/ce-shi-cha-ru-tu-pian/</url>
      
        <content type="html"><![CDATA[<p>奥地利那女</p><p><img src="/2020/11/17/ce-shi/ce-shi-cha-ru-tu-pian/16864484-0ab72eb5148a5cb6.jpeg" alt="16864484-0ab72eb5148a5cb6"><img src=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JSP总结</title>
      <link href="2020/11/11/qian-duan-ye-mian/jsp-zong-jie/"/>
      <url>2020/11/11/qian-duan-ye-mian/jsp-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-jsp是什么"><a href="#1-jsp是什么" class="headerlink" title="1.jsp是什么"></a>1.jsp是什么</h2><pre class=" language-java"><code class="language-java">jsp的全称    Java Server Pages        是一种动态网页开发技术    ​jsp servlet php asp 等属于动态网页技术    ​jsp页面是以 <span class="token punctuation">.</span>jsp 结尾的文件    ​<span class="token punctuation">.</span>html 文件是静态页面    ​<span class="token punctuation">.</span>jsp  文件是动态页面    ​jsp页面允许我们在HTML代码中嵌入java代码，这样我们就可以在HTML中使用java代码来完成的功      能了    ​简单的理解，jsp就是就是HTML页面 <span class="token operator">+</span> java代码    ​但是jsp中能写的内容还不止这些，可以包含如下内容：        ​HTML标签        ​css        ​javascript        ​java代码        ​EL表达式        ​引入并使用其他标签库            例：jst1标签库、struts2标签库、spring框架标签库 等    ​所以jsp页面里面除了能写之前在HTML里面写东西之外，还可以写很多和java相关的对象，java代        码、EL表达式、动态标签库等（这些对象的本质都是执行java代码）</code></pre><blockquote><p>【注意】jsp页面中可以只有java代码，也可以一句java代码也没有</p></blockquote><h2 id="2-jsp的运行"><a href="#2-jsp的运行" class="headerlink" title="2.jsp的运行"></a>2.jsp的运行</h2><pre class=" language-java"><code class="language-java">    ​浏览器可以直接运行HTML页面，但是不能直接运行jsp页面，jsp是需要在web容器中运行（拥有jsp引擎，Jasper<span class="token punctuation">.</span>jar）        例：    tomcat服务器    ​所以jsp是运行在服务端的，运行完之后，把动态生成的HTML页面再使用io流写回给浏览器，浏览器接收并且解析后再呈现出来效果</code></pre><h2 id="3-jsp和servlet的关系"><a href="#3-jsp和servlet的关系" class="headerlink" title="3.jsp和servlet的关系"></a>3.jsp和servlet的关系</h2><pre class=" language-java"><code class="language-java">    ​简单的讲，一个jsp页面就是一个servlet    ​jsp页面第一次被访问的时候，会被tomcat服务器编译成一个java类，这个java默认继承HTTPJSPBase类，而HTTPJSPBase类是HttpServlet的子类    ​我们编写的jsp页面最终就被tomcat服务器编译成了一个HttpServlet的子类，所以说jsp本身就是一个servlet，那么jsp为什么是需要运行在tomcat服务器中原因也就很好理解了    ​jsp页面被tomcat服务器编译成的java文件及其<span class="token keyword">class</span>文件保存在tomcat服务器里面的work目录中，在这里的代码中，我们还可以看见它是如何使用io流把生成的HTML页面代码一行一行写回给浏览器的</code></pre><h3 id="work"><a href="#work" class="headerlink" title="work"></a>work</h3><pre class=" language-java"><code class="language-java">    tomcat中lib目录中的 Jasper<span class="token punctuation">.</span>jar 相关API里面封装了一些操作，可以把jsp页面编译为java文件以及<span class="token keyword">class</span>文件    例：    ​桌面上手动有一个web项目：web<span class="token operator">-</span>test    ​项目中有一个jsp页面：hello<span class="token punctuation">.</span>jsp    ​运行下面java代码把web项目中的jsp页面编译成java文件和<span class="token keyword">class</span>文件    【注意】web项目的基本结构    运行环境    ​如果是在web项目运行下面代码，需要额外加入两个jar包：（web项目中已经有了tomcat中的lib    里面的jar了）        ant<span class="token operator">-</span><span class="token number">1.10</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>jar        tomcat<span class="token operator">-</span>juli<span class="token operator">-</span><span class="token number">8.5</span><span class="token punctuation">.</span><span class="token number">38</span><span class="token punctuation">.</span>jar    ​如果是在java项目中运行下面代码，至少需要加入以下jar包：        tomcat<span class="token operator">-</span>juli<span class="token operator">-</span><span class="token number">8.5</span><span class="token punctuation">.</span><span class="token number">38</span><span class="token punctuation">.</span>jar        ant<span class="token operator">-</span><span class="token number">1.10</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>jar        jasper<span class="token punctuation">.</span>jar        servlet<span class="token operator">-</span>api<span class="token punctuation">.</span>jar        tomcat<span class="token operator">-</span>api<span class="token punctuation">.</span>jar        tomcat<span class="token operator">-</span>util<span class="token punctuation">.</span>jar        jsp<span class="token operator">-</span>api<span class="token punctuation">.</span>jar        el<span class="token operator">-</span>api<span class="token punctuation">.</span>jar        ecj<span class="token operator">-</span><span class="token number">4.6</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">.</span>jar    示例：    <span class="token keyword">package</span> com<span class="token punctuation">.</span>briup<span class="token punctuation">.</span>test<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>JspC<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCompiler</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jspcTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  JspC jspc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JspC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//web应用的root目录  </span>                jspc<span class="token punctuation">.</span><span class="token function">setUriroot</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\web-test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//.java文件和.class文件的输出目录  </span>                jspc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\ASUS\\Desktop\\web-test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//要编译的jsp</span>                jspc<span class="token punctuation">.</span><span class="token function">setJspFiles</span><span class="token punctuation">(</span><span class="token string">"hello.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//false或不指定的话只生成.java文件  </span>                jspc<span class="token punctuation">.</span><span class="token function">setCompile</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                jspc<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              TestCompiler t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestCompiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              t<span class="token punctuation">.</span><span class="token function">jspcTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><h2 id="4-jsp的生命周期"><a href="#4-jsp的生命周期" class="headerlink" title="4.jsp的生命周期"></a>4.jsp的生命周期</h2><h3 id="1）编译阶段"><a href="#1）编译阶段" class="headerlink" title="1）编译阶段"></a>1）编译阶段</h3><pre class=" language-java"><code class="language-java">    客户端第一次访问jsp的时候，服务器会把这个jsp页面翻译成对应的java文件，然后把java文件编译成对应的<span class="token keyword">class</span>文件    hello<span class="token punctuation">.</span>jsp  <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>  hello_jsp<span class="token punctuation">.</span>java  <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>  hello_jsp<span class="token punctuation">.</span><span class="token keyword">class</span>    观察这个java文件的内容可知，这就是一个servlet</code></pre><h3 id="2）初始化阶段"><a href="#2）初始化阶段" class="headerlink" title="2）初始化阶段"></a>2）初始化阶段</h3><pre class=" language-java"><code class="language-java">    ​客户端第一次访问jsp页面，在服务器把jsp翻译成java文件并编译<span class="token keyword">class</span>文件后，服务器会加载这个<span class="token keyword">class</span>文件内容，并且创建出此servlet对象（因此jsp就是一个servlet），然后调用这个servlet对象中的init方法进行初始化    ​如果我们想给jsp进行自定义的初始化内容，只要在【jsp声明】中重写 <span class="token function">jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法即可。    ​【注意】不要重写 <span class="token function">_jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>因为jsp编译成java类的时候，会自动重写这个方法，观察编译后的java代码就可以知道     例：        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的jsp自定义初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">%</span><span class="token operator">></span></code></pre><h3 id="3）执行阶段"><a href="#3）执行阶段" class="headerlink" title="3）执行阶段"></a>3）执行阶段</h3><pre class=" language-java"><code class="language-java">    ​客户端访问jsp页面的时候，服务器会调用其对应的servlet对象中的一个指定方法 <span class="token function">_jspService</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span>    ​就是在这个 <span class="token function">_jspService</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span>方法中使用io流，把动态生成的HTML一行一行写给了浏览器    ​【注意】本来是调用servlet对象中的service方法的，但是在HTTPJSPBase中重写的service方法中又调用了这个 <span class="token function">_jspService</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span> 方法</code></pre><h3 id="4）销毁阶段"><a href="#4）销毁阶段" class="headerlink" title="4）销毁阶段"></a>4）销毁阶段</h3><pre class=" language-java"><code class="language-java">    ​当服务器正关闭的时候，jsp对应的servlet对象会被销毁，并且调用servlet中的destroy方法    ​如果我们在jsp对应的servlet对象销毁时完成一些工作，只要在jsp声明中重写 <span class="token function">jspDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     方法即可       例：        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jspDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的jsp进行销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">%</span><span class="token operator">></span></code></pre><h3 id="客户端访问jsp页面的特点"><a href="#客户端访问jsp页面的特点" class="headerlink" title="客户端访问jsp页面的特点"></a>客户端访问jsp页面的特点</h3><pre class=" language-java"><code class="language-java">    通过上述jsp的生命周期可知，写完一个jsp项目之后，第一次部署运行的时候，整个项目的运行速度会慢一些，因为第一次访问运行jsp的时候，需要先翻译成 <span class="token punctuation">.</span>java 文件然后再翻译成 <span class="token punctuation">.</span><span class="token keyword">class</span>文件 ，最后再运行，这个过程会耗费一些时间，但是第二次访问运行的时候就会比较快了</code></pre><h2 id="5-jsp页面中嵌入java代码"><a href="#5-jsp页面中嵌入java代码" class="headerlink" title="5.jsp页面中嵌入java代码"></a>5.jsp页面中嵌入java代码</h2><pre class=" language-java"><code class="language-java">jsp的脚本元素    jsp的指令元素    jsp的动作元素</code></pre><h3 id="1）jsp的脚本元素（直接嵌入java代码）"><a href="#1）jsp的脚本元素（直接嵌入java代码）" class="headerlink" title="1）jsp的脚本元素（直接嵌入java代码）"></a>1）jsp的脚本元素（直接嵌入java代码）</h3><h4 id="第一种：表达式（expression）"><a href="#第一种：表达式（expression）" class="headerlink" title="第一种：表达式（expression）"></a>第一种：表达式（expression）</h4><pre class=" language-java"><code class="language-java">形式：        <span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">%</span><span class="token operator">></span>例：        <span class="token operator">&lt;</span><span class="token operator">%=</span><span class="token string">"hello"</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%=</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%=</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>    ​将来翻译到java文件中的位置        _jspService 方法中的 out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> 里面的参数    ​例如上面的三个例子会翻译成        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ​所以 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>这个方法的参数可以写什么，那么我们这个jsp页面中的表达式里面就可以写什么</code></pre><h4 id="第二种：脚本（scripttlet"><a href="#第二种：脚本（scripttlet" class="headerlink" title="第二种：脚本（scripttlet)"></a>第二种：脚本（scripttlet)</h4><pre class=" language-java"><code class="language-java">形式：        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">%</span><span class="token operator">></span>          或          <span class="token operator">&lt;</span><span class="token operator">%</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>          <span class="token operator">%</span><span class="token operator">></span>   例：    <span class="token operator">&lt;</span><span class="token operator">%</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> <span class="token string">"tom"</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">%</span><span class="token operator">></span>   将来翻译到java文件中的位置        ​脚本中的代码将来会被直接翻译到 _jspService 这个方法中        ​在一个普通的方法中我们可以写什么样的代码，那么在脚本中就可以写什么样的代码        ​【注意】脚本中所写的代码，代码的最后是要加上 <span class="token punctuation">;</span> 分号的，因为我们在一个方法里面所写的         每一句代码后面都要加 <span class="token punctuation">;</span> 分号        ​在脚本声明的变量，我们是可以在表达式里面使用的，但是要注意要先声明在使用变量。         只要查看脚本和表达式方别翻译到java文件中的位置，就可以很清楚的认识到这点</code></pre><h4 id="第三种：声明（declaration）"><a href="#第三种：声明（declaration）" class="headerlink" title="第三种：声明（declaration）"></a>第三种：声明（declaration）</h4><pre class=" language-java"><code class="language-java">形式：        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>          <span class="token operator">%</span><span class="token operator">></span>    例：        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>            <span class="token keyword">private</span> String name<span class="token punctuation">;</span>            <span class="token keyword">public</span> String <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello word"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"this is go()"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token operator">%</span><span class="token operator">></span>    将来翻译到java文件中的位置：        ​直接将声明中的代码翻译到java文件里面所定义的类中        ​所以我们直接可以在一个类中写什么，就可以在声明中写什么            一般在声明中去定义一些类中的成员变量或者方法   【注意】这里面的代码，定义变量的时候要加 <span class="token punctuation">;</span> 分号<span class="token punctuation">,</span>                     定义方法的时候不用加 <span class="token punctuation">;</span> 分号，          这是和我们写一个java类语法是一样的</code></pre><h3 id="2）jsp的指令元素"><a href="#2）jsp的指令元素" class="headerlink" title="2）jsp的指令元素"></a>2）jsp的指令元素</h3><pre class=" language-java"><code class="language-java">    jsp的指令是给jsp引擎看的，让jsp引擎在翻译jsp页面成java文件的时候，知道需要注意哪些地方的设置    例：        ​页面中的编码        ​页面中脚本里面所用的编程语言        ​翻译的java文件中需要引入哪些其他包下的java类 等<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    写法：        <span class="token operator">&lt;</span><span class="token operator">%</span>@指令名字 属性<span class="token operator">=</span><span class="token string">"值"</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">%</span><span class="token operator">></span>    指令包含page  include  taglib 三种</code></pre><h4 id="page-指令"><a href="#page-指令" class="headerlink" title="page 指令"></a>page 指令</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//表示当前页面中的编程语言是java，目前这个属性值只能写成java</span>    Language <span class="token operator">=</span> <span class="token string">"java"</span><span class="token comment" spellcheck="true">//在当前页面中要引入哪些包下的类</span>    <span class="token keyword">import</span> <span class="token operator">=</span> <span class="token string">"java.util.HashMap"</span>    <span class="token keyword">import</span> <span class="token operator">=</span> <span class="token string">"java.util.HashMap,java.sql.Connection"</span><span class="token comment" spellcheck="true">//设置jsp页面文件保存时候所用的编码</span>    pageEncoding <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token comment" spellcheck="true">//设置服务器将来使用io把jsp页面内容一行一行的输出给浏览器的时候，使用什么编码向浏览器输出         contentType = "text/html;charset=UTF-8"</span><span class="token comment" spellcheck="true">//设置jsp页面被翻译成java文件的时候，java文件中的类要继承哪个父类。这个属性不用设置，jsp引擎会给它一个默认的父类去继承的</span>    <span class="token keyword">extends</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token comment" spellcheck="true">//设置当前这个jsp页面是否支持session对象的使用        默认是支持的</span>    session <span class="token operator">=</span> <span class="token string">"true"</span><span class="token comment" spellcheck="true">//设置jsp页面是否是线程安全的</span>    isThreadSafe <span class="token operator">=</span> <span class="token string">"true"</span><span class="token comment" spellcheck="true">//如果a.jsp页面中设置了errorPage = "b,jsp"，那么a.jsp页面在运行的时候一旦出错，就会自动跳转到b.jsp里面</span>    errorPage <span class="token operator">=</span> <span class="token string">""</span><span class="token comment" spellcheck="true">//如果一个页面中设置了isErrorPage = "true",那么就表示这个页面是用来专门显示错误信息的面。   然后在这个页面中就能够使用到隐藏对象exception来显示出错误的信息了（需要使用jsp的内置对象）</span>    isErrorPage <span class="token operator">=</span> <span class="token string">""</span></code></pre><h4 id="include-指令"><a href="#include-指令" class="headerlink" title="include 指令"></a>include 指令</h4><pre class=" language-java"><code class="language-java">写法：        <span class="token operator">&lt;</span><span class="token operator">%</span>@ include file <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">%</span><span class="token operator">></span>作用：    ​在当前页面中使用include指令可以把另一个页面的内容引入到当前页面    ​一个页面包含<span class="token operator">/</span>引入另一个页面有两种方式：        ​静态包含    <span class="token operator">&lt;</span><span class="token operator">%</span>@ include file <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">%</span><span class="token operator">></span>         ​动态包含    <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>include page <span class="token operator">=</span> <span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>jsp<span class="token operator">:</span>include<span class="token operator">></span>静态包含特点：    ​a<span class="token punctuation">.</span>jsp页面中静态包含了b<span class="token punctuation">.</span>jsp页面，那么在翻译期间，jsp引擎在翻译a<span class="token punctuation">.</span>jsp成为一个              a_jsp<span class="token punctuation">.</span>java文件的时候，发现jsp页面中有include指令，这时候jsp引擎就会把被包含耳钉页面       b<span class="token punctuation">.</span>jsp中的内容原封不动的拿到 a_jsp<span class="token punctuation">.</span>java中，然后用io流输出出去</code></pre><h4 id="taglib-指令"><a href="#taglib-指令" class="headerlink" title="taglib 指令"></a>taglib 指令</h4><pre class=" language-java"><code class="language-java">作用：    在当前jsp页面中引入一些特殊的标签库    例：        ​jstl标签库        ​struts2标签库        ​spring标签库</code></pre><h3 id="3）jsp的动作元素"><a href="#3）jsp的动作元素" class="headerlink" title="3）jsp的动作元素"></a>3）jsp的动作元素</h3><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>useBean id <span class="token operator">=</span> <span class="token string">"s"</span> <span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">"com.briup.bean.Student"</span> scope <span class="token operator">=</span> <span class="token string">"page"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>jsp<span class="token operator">:</span>useBean<span class="token operator">></span>相当于代码：    <span class="token operator">&lt;</span><span class="token operator">%</span>        Student s <span class="token operator">=</span> null<span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>pageContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pageContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>setProperty property <span class="token operator">=</span> <span class="token string">"name"</span> value <span class="token operator">=</span> <span class="token string">"tom"</span> name <span class="token operator">=</span> <span class="token string">"s"</span> <span class="token operator">/</span><span class="token operator">></span>相当于代码：       <span class="token operator">&lt;</span><span class="token operator">%</span>        Student s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>pageContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>getProperty property <span class="token operator">=</span> <span class="token string">"name"</span> name <span class="token operator">=</span> <span class="token string">"s"</span> <span class="token operator">/</span><span class="token operator">></span>相当于代码：    <span class="token operator">&lt;</span><span class="token operator">%</span>        Student s <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>pageContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">%</span><span class="token operator">></span>       <span class="token comment" spellcheck="true">//页面跳转</span>        <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>forward page <span class="token operator">=</span> <span class="token string">"target.jsp"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>jsp<span class="token operator">:</span>forward<span class="token operator">></span>    <span class="token comment" spellcheck="true">//页面跳转的同时还可以传参数  </span>        <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>forward page<span class="token operator">=</span><span class="token string">"target.jsp?name=tom"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>jsp<span class="token operator">:</span>forward<span class="token operator">></span>        或        <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>forward page <span class="token operator">=</span> <span class="token string">"target.jsp"</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">//这个动作元素专门是传参数使用的</span>            <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>param value <span class="token operator">=</span> <span class="token string">"tom"</span> name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>jsp<span class="token operator">:</span>forward<span class="token operator">></span>          <span class="token comment" spellcheck="true">//使用jsp的动作元素向浏览器输出一个标签</span>        <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>element name <span class="token operator">=</span> <span class="token string">"font"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>attribute name <span class="token operator">=</span> <span class="token string">"color"</span><span class="token operator">></span>blue<span class="token operator">&lt;</span><span class="token operator">/</span>jsp<span class="token operator">:</span>attribute<span class="token operator">></span>            <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>body<span class="token operator">></span>hello world<span class="token operator">&lt;</span><span class="token operator">/</span>jsp<span class="token operator">:</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>jsp<span class="token operator">:</span>element<span class="token operator">></span>     这个效果相当于在页面代码中直接写上        <span class="token operator">&lt;</span>font color <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token operator">></span>hello world<span class="token operator">&lt;</span><span class="token operator">/</span>font<span class="token operator">></span>        或        <span class="token operator">&lt;</span><span class="token operator">%</span>               out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;font color='blue'>hello world&lt;/font>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">%</span><span class="token operator">></span></code></pre><h4 id="动态包含"><a href="#动态包含" class="headerlink" title="动态包含"></a>动态包含</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态包含</span>    <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>include page <span class="token operator">=</span> <span class="token string">"foot.jsp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>param value <span class="token operator">=</span> <span class="token string">"jack"</span> name <span class="token operator">=</span> <span class="token string">"name"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>jsp<span class="token operator">:</span>include<span class="token operator">></span>        </code></pre><blockquote><p>【注意】动态包含不能使用 url?name=tom这种传参方式</p></blockquote><h4 id="动态包含特点"><a href="#动态包含特点" class="headerlink" title="动态包含特点"></a>动态包含特点</h4><pre class=" language-java"><code class="language-java">在把jsp文件翻译成java文件的期间，动态包含并不会去把包含的页面原封不动的拿过来​而是会把动态包含这个标签翻译成一个方法的调用​将来运行页面调用到这个方法的时候才会去拿被包含页面的内容​同时还可以给动态包含的页面传参数​静态包含是不能传参数的</code></pre><blockquote><p>【注意】静态包含的执行效率高于动态包含的执行效率</p></blockquote><h2 id="6-errorPage与isErrorPage的区别-面试常考"><a href="#6-errorPage与isErrorPage的区别-面试常考" class="headerlink" title="6.errorPage与isErrorPage的区别(面试常考)"></a>6.errorPage与isErrorPage的区别(面试常考)</h2><pre class=" language-java"><code class="language-java">    ​errorPage<span class="token operator">:</span>        此页面出错时跳转到我们所写的出错页面    ​isErrorPage <span class="token operator">=</span> <span class="token string">"true"</span> 用来专门显示异常错误信息的页面        默认<span class="token boolean">false</span>           ​另外在这个页面中【能够使用到隐藏对象exception】来显示出错误的信息        ​只有注明参数为<span class="token boolean">true</span>才有exception对象</code></pre><h2 id="7-动态包含与静态包含的区别-面试常考"><a href="#7-动态包含与静态包含的区别-面试常考" class="headerlink" title="7.动态包含与静态包含的区别(面试常考)"></a>7.动态包含与静态包含的区别(面试常考)</h2><pre class=" language-java"><code class="language-java">    ​语法不同        ​静态包含是指令元素中的        <span class="token operator">&lt;</span><span class="token operator">%</span>@ include file<span class="token operator">=</span><span class="token string">""</span><span class="token operator">%</span><span class="token operator">></span>         ​动态包含是动作元素中的        <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>include page<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>jsp<span class="token operator">:</span>include<span class="token operator">></span>    ​原理不同        ​静态包含是将包含页面的整个页面的内容都拿过来，使用io流写回浏览器            只生成一个servlet和<span class="token keyword">class</span>文件         ​动态包含是将包含的页面的标签翻译成 include 方法，在运行期间才会调用，然后结合            生成各自的servlet和<span class="token keyword">class</span>文件    ​参数传递不同        ​静态包含无法传参，不能通过file的url向被包含的jsp页面传递参数        ​动态包含可以传参<span class="token punctuation">,</span>通过 <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>param value<span class="token operator">=</span><span class="token string">""</span> name<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span> 传递参数            传参出现中文乱码：    request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    或过滤器           【注意】传参数的方式不能是 <span class="token operator">?</span>参数名<span class="token operator">=</span>初始值<span class="token punctuation">,</span>    ​静态包含的执行效率更高    ​request对象        静态包含，共用一个request内置对象        动态包含，各用各的request</code></pre><h2 id="8-jsp页面中的注释-comment"><a href="#8-jsp页面中的注释-comment" class="headerlink" title="8.jsp页面中的注释  comment"></a>8.jsp页面中的注释  comment</h2><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h3><pre class=" language-jsp"><code class="language-jsp"><!-- html/xml 中的注释方式 -->特点：    ​用户在浏览器中右键查看源代码【能】看到这个注释    ​在服务器端，这个jsp页面被翻译成的java文件中【能】看到这个注释注意：用这种注释注释后没有效果的有    ​jsp动作元素    注释后jsp动作元素正常执行    ​EL表达式例：    ​无效用法        <!--  <jsp:forward page="hello.jsp"></jsp:forward>  -->        <!--  ${}  -->    ​解决方法        <%--  <jsp:forward page="hello.jsp"></jsp:forward>  --%>        <%--  ${}  --%></code></pre><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>  jsp中的注释方式（隐藏注释）  <span class="token operator">--</span><span class="token operator">%</span><span class="token operator">></span>特点：      ​用户在浏览器中右键查看源代码【不能】看到这个注释，及内容    ​在服务器端，这个jsp页面被翻译成的java文件中【不能】看到这个注释</code></pre><h3 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h3><pre class=" language-java"><code class="language-java">java中的注释方式，但这种注释方式只能在jsp的脚本或者声明中使用    <span class="token comment" spellcheck="true">//String name = "tom";</span>    <span class="token comment" spellcheck="true">/*        int b = 10;    */</span>    <span class="token comment" spellcheck="true">/**        Double c = 20.0;     */</span>特点：    ​用户在浏览器中右键查看源代码【不能】看到这个注释    ​在服务器端，这个jsp页面被翻译成的java文件中【能】看到这个注释</code></pre><h2 id="9-内置对象（在jsp页面代码中可以直接使用的对象）"><a href="#9-内置对象（在jsp页面代码中可以直接使用的对象）" class="headerlink" title="9.内置对象（在jsp页面代码中可以直接使用的对象）"></a>9.内置对象（在jsp页面代码中可以直接使用的对象）</h2><pre class=" language-java"><code class="language-java">其实是只有在这个 <span class="token function">_jspService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法中才能使用的jsp脚本和jsp表达式    jsp脚本和jsp表达式    <span class="token operator">&lt;</span><span class="token operator">%</span>  脚本  <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%=</span>  表达式  <span class="token operator">%</span><span class="token operator">></span></code></pre><h3 id="共有9个内置对象可以直接使用"><a href="#共有9个内置对象可以直接使用" class="headerlink" title="共有9个内置对象可以直接使用"></a>共有9个内置对象可以直接使用</h3><table><thead><tr><th align="left">类型</th><th align="left">名字</th><th align="left">解释</th><th align="left">范围</th></tr></thead><tbody><tr><td align="left">PageContext</td><td align="left">pageContext</td><td align="left">jsp页面上下文</td><td align="left">同一页面</td></tr><tr><td align="left">HttpServletRequest</td><td align="left">request</td><td align="left">请求</td><td align="left">一次请求</td></tr><tr><td align="left">HttpSession</td><td align="left">session</td><td align="left">会话</td><td align="left">一次会话</td></tr><tr><td align="left">ServletContext</td><td align="left">application</td><td align="left">应用</td><td align="left">服务器开启到关闭</td></tr><tr><td align="left">Object</td><td align="left">page</td><td align="left">jsp页面本身，相当于this，其实就是jsp页面翻译成的java类对象</td><td align="left"></td></tr><tr><td align="left">HttpServletResponse</td><td align="left">response</td><td align="left">响应</td><td align="left"></td></tr><tr><td align="left">JspWriter</td><td align="left">out</td><td align="left">输出流</td><td align="left"></td></tr><tr><td align="left">ServletConfig</td><td align="left">config</td><td align="left">jsp的配置信息</td><td align="left"></td></tr><tr><td align="left">Throwable</td><td align="left">exception</td><td align="left">当设置isErrorPage(true)时，可处理其他页面异常</td><td align="left"></td></tr></tbody></table><pre class=" language-jsp"><code class="language-jsp"><jsp:useBean id="s" class="com.briup.bean.Student" scope="page"></jsp:useBean>pageContext.setAttribute("stu",s);</code></pre><blockquote><p>【注意】为什么这些对象可以直接使用，因为他们都是在 _jspService这个方法中默认声明出来了。而我们在表达式和脚本中所写的java代码将来是要翻译到 _jspService 方法中的，所以我们在表达式和脚本中写java代码的时候可以直接使用这些对象。</p></blockquote><h4 id="四个范围对象-（在一定范围内可以存取数据）"><a href="#四个范围对象-（在一定范围内可以存取数据）" class="headerlink" title="四个范围对象        （在一定范围内可以存取数据）"></a>四个范围对象        （在一定范围内可以存取数据）</h4><pre class=" language-java"><code class="language-java">    ​pageContext        <span class="token comment" spellcheck="true">//页面范围（只能在同一页面中起作用）</span>    ​request            <span class="token comment" spellcheck="true">//一次请求之间</span>    ​session            <span class="token comment" spellcheck="true">//一次会话之间</span>    ​application        <span class="token comment" spellcheck="true">//服务器开启到服务器关闭</span></code></pre><h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><pre class=" language-java"><code class="language-java">    ​虽然名字叫page，但是这个并不是页面范围对象，它是Object类型的对象，表示当前这个页面本身（jsp页面就是一个servlet）    ​其实page指的是jsp页面翻译成的java类对象，服务器使用这个java类所创建的对象（把page对象输出即可看到），所以说page对象代表jsp页面本身       <span class="token operator">&lt;</span><span class="token operator">%=</span><span class="token punctuation">(</span>page <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>            输出的结果为 <span class="token boolean">true</span></code></pre><h4 id="out"><a href="#out" class="headerlink" title="out"></a>out</h4><pre class=" language-java"><code class="language-java">    用于向浏览器输出内容的输出流</code></pre><h4 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h4><pre class=" language-java"><code class="language-java">    ​这个对象其实我们并不能直接使用，需要相关设置后才能使用，这个可以算是一个隐藏的对象。    ​这个对象表示将来这个jsp页面运行出错的地方所抛出的异常对象</code></pre><h2 id="10-jsp页面中的路径"><a href="#10-jsp页面中的路径" class="headerlink" title="10.jsp页面中的路径"></a>10.jsp页面中的路径</h2><pre class=" language-java"><code class="language-java">    ​一般情况下，jsp中路径问题是我们之前在servlet中讨论的HTML里面的路径问题是一样的，但是在         jsp中可以动态获得该项目的url    ​如果在jsp页面的上面写了这样一个脚本        <span class="token operator">&lt;</span><span class="token operator">%</span>           String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//包名</span>           String basePath <span class="token operator">=</span> requrst<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"://"</span> <span class="token operator">+</span>                                request<span class="token punctuation">.</span><span class="token function">getServerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> path <span class="token operator">+</span> "         <span class="token operator">%</span><span class="token operator">></span>    ​并且在 <span class="token operator">&lt;</span>head<span class="token operator">></span> 标签中加入了一个子标签        <span class="token operator">&lt;</span>base href<span class="token operator">=</span><span class="token string">"&lt;%=basePath%>"</span> <span class="token operator">/</span><span class="token operator">></span>    ​那么在这个jsp页面中，我们再去写上一个相对路径（最左边没有加<span class="token operator">/</span>的那种路径）<span class="token punctuation">,</span>它就不是相对于地     址栏中的当前路径了，而是要相对于这个basePath变量所代表的的这个路径</code></pre><h2 id="11-EL表达式"><a href="#11-EL表达式" class="headerlink" title="11.EL表达式"></a>11.EL表达式</h2><pre class=" language-java"><code class="language-java">形式：     $<span class="token punctuation">{</span> <span class="token punctuation">}</span>作用：        从一个范围里面取值或者从一个对象中取值或是向页面输出值（取值并显示）    ​接收客户端参数        $<span class="token punctuation">{</span>param<span class="token punctuation">.</span>name<span class="token punctuation">}</span>    ​指定范围并取值        $<span class="token punctuation">{</span>pageScope<span class="token punctuation">.</span>name1<span class="token punctuation">}</span>        $<span class="token punctuation">{</span>requestScope<span class="token punctuation">.</span>name2<span class="token punctuation">}</span>        $<span class="token punctuation">{</span>sessionScope<span class="token punctuation">.</span>name3<span class="token punctuation">}</span>        $<span class="token punctuation">{</span>applicationScope<span class="token punctuation">.</span>name4<span class="token punctuation">}</span>    ​可以不指定范围就去取值        $<span class="token punctuation">{</span>name<span class="token punctuation">}</span>        ​这个时候会按照pageContext、 request、 session、 application 这样的顺序依次的          去找有没有一个叫name的值存在，一但找到了就输出出来，最终没有找到那么什么都不输出    ​取出一个对象中的属性值        $<span class="token punctuation">{</span>requestScope<span class="token punctuation">.</span>student<span class="token punctuation">.</span>id<span class="token punctuation">}</span>        $<span class="token punctuation">{</span>requestScope<span class="token punctuation">.</span>student<span class="token punctuation">.</span>name<span class="token punctuation">}</span>        $<span class="token punctuation">{</span>requestScope<span class="token punctuation">.</span>student<span class="token punctuation">.</span>age<span class="token punctuation">}</span>        或        $<span class="token punctuation">{</span>student<span class="token punctuation">.</span>id<span class="token punctuation">}</span>        $<span class="token punctuation">{</span>student<span class="token punctuation">.</span>name<span class="token punctuation">}</span>        $<span class="token punctuation">{</span>student<span class="token punctuation">.</span>age<span class="token punctuation">}</span>        或        $<span class="token punctuation">{</span>student<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        $<span class="token punctuation">{</span>student<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        $<span class="token punctuation">{</span>student<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        $<span class="token punctuation">{</span>student<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        $<span class="token punctuation">{</span>student<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        $<span class="token punctuation">{</span>student<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    【注意】          ​$<span class="token punctuation">{</span>student<span class="token punctuation">.</span>id<span class="token punctuation">}</span> 表示是要调用student对象中的getId方法，至少对象中有没有id属性对               这个操作没有任何影响          ​所以这个id指的是对象中的 property ，而不是 attribute          ​如果Student类中一个方法是getAddress，返回一个Address类的对象，Address类中有           一个方法getCity，这个时候我们就可以这样写去拿到city属性值                $<span class="token punctuation">{</span>student<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">}</span>    ​输出字符串        $<span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">}</span>    ​输出运算结果或者<span class="token keyword">boolean</span>表达式        $<span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">}</span>        $<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">3</span> <span class="token punctuation">}</span>        $<span class="token punctuation">{</span>u<span class="token punctuation">.</span>age <span class="token operator">*</span> <span class="token number">10</span> <span class="token punctuation">}</span>        $<span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">}</span>        $<span class="token punctuation">{</span>empty <span class="token string">""</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//为空的话返回true</span>        $<span class="token punctuation">{</span>empty <span class="token string">"hello"</span><span class="token punctuation">}</span>        $<span class="token punctuation">{</span>not empty <span class="token string">"hello"</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//取否 不为空的话返回 true</span>        $<span class="token punctuation">{</span><span class="token operator">!</span> empty <span class="token string">"hello"</span><span class="token punctuation">}</span>        $<span class="token punctuation">{</span>param<span class="token punctuation">.</span>score <span class="token operator">></span> <span class="token number">50</span> <span class="token punctuation">}</span>        $<span class="token punctuation">{</span>param<span class="token punctuation">.</span>score <span class="token operator">></span> <span class="token number">60</span><span class="token operator">?</span><span class="token string">"good"</span><span class="token operator">:</span><span class="token string">"bad"</span><span class="token punctuation">}</span>    ​输出数组、集合中的元素        <span class="token operator">&lt;</span><span class="token operator">%</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"jake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>        $<span class="token punctuation">{</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>        $<span class="token punctuation">{</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>        $<span class="token punctuation">{</span>map<span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    ​key的值中含有特殊符号点        例：           request对象中有一个key值为；javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>forward<span class="token punctuation">.</span>request_uri           要取这个值必须用以下形式            $<span class="token punctuation">{</span>requestScope<span class="token punctuation">[</span><span class="token string">'javax.servlet.forward.request_uri'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></code></pre><h2 id="12-JSTL标签库-（JSP-Standard-Tag-Library）"><a href="#12-JSTL标签库-（JSP-Standard-Tag-Library）" class="headerlink" title="12.JSTL标签库        （JSP Standard Tag Library）"></a>12.JSTL标签库        （JSP Standard Tag Library）</h2><h3 id="1）让web项目支持JSTL标签库"><a href="#1）让web项目支持JSTL标签库" class="headerlink" title="1）让web项目支持JSTL标签库"></a>1）让web项目支持JSTL标签库</h3><pre class=" language-java"><code class="language-java">    在eclipse中，建立一个文本项目，默认都是不支持JSTL，所以需要我们自己把JSTL的jar包导入到项目中（复制，粘贴到项目中的lib目录）：    jst1<span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">.</span>jar</code></pre><h3 id="2）把JSTL标签库导入到某一个jsp页面中"><a href="#2）把JSTL标签库导入到某一个jsp页面中" class="headerlink" title="2）把JSTL标签库导入到某一个jsp页面中"></a>2）把JSTL标签库导入到某一个jsp页面中</h3><pre class=" language-java"><code class="language-java">使用jsp中的taglib指令    <span class="token operator">&lt;</span><span class="token operator">%</span>@ taglib uri <span class="token operator">=</span> <span class="token string">"http://java.sun.com/jsp/jstl/core"</span> prefix<span class="token operator">=</span><span class="token string">"c"</span> <span class="token operator">%</span><span class="token operator">></span>    prefix<span class="token operator">=</span><span class="token string">"c"</span>相当于给这个标签库起一个别名，将来在页面中就是用以c开头的标签来使用标签库中的标      签。这个别名也可以叫其他的名字    <span class="token operator">&lt;</span>c<span class="token operator">:</span>forEach<span class="token operator">></span>标签<span class="token operator">:</span>        <span class="token operator">&lt;</span><span class="token operator">%</span>            List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"tom2"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"tom3"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"tom4"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span>forEach items <span class="token operator">=</span><span class="token string">"${list}"</span> var<span class="token operator">=</span><span class="token string">"stu"</span> begin<span class="token operator">=</span><span class="token string">"0"</span> end<span class="token operator">=</span><span class="token string">"3"</span>                     varStatus<span class="token operator">=</span><span class="token string">"status"</span> step<span class="token operator">=</span><span class="token string">"1"</span> <span class="token operator">></span>            $<span class="token punctuation">{</span>status<span class="token punctuation">.</span>index<span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span>stu<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">-</span>$<span class="token punctuation">{</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">-</span>$<span class="token punctuation">{</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>foEach<span class="token operator">></span>         ​begin<span class="token operator">=</span><span class="token string">""</span>默认值是<span class="token number">0</span>  end <span class="token operator">=</span><span class="token string">""</span>默认值是最后一个元素<span class="token punctuation">,</span>         ​一般的遍历只要写var和items来个属性即可</code></pre><h4 id="遍历List集合"><a href="#遍历List集合" class="headerlink" title="遍历List集合"></a>遍历List集合</h4><pre class=" language-java"><code class="language-java">    map是一个Map类型的集合，放到了request对象中，entry是我们定义的一个变量，用做接收每次遍历到集合中的一组键值对，我们可以通过entry<span class="token punctuation">.</span>key  entry<span class="token punctuation">.</span>value 分别拿到这次遍历到的key值和value值    <span class="token operator">&lt;</span>c<span class="token operator">:</span>foEach items<span class="token operator">=</span><span class="token string">"${map}"</span> var<span class="token operator">=</span><span class="token string">"entry"</span><span class="token operator">></span>        $<span class="token punctuation">{</span>entry<span class="token punctuation">.</span>key <span class="token punctuation">}</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> $<span class="token punctuation">{</span>entry<span class="token punctuation">.</span>value<span class="token punctuation">.</span>id<span class="token punctuation">}</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> $<span class="token punctuation">{</span>entry<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>        $<span class="token punctuation">{</span>entry<span class="token punctuation">.</span>value<span class="token punctuation">.</span>age <span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>forEach<span class="token operator">></span>    <span class="token operator">&lt;</span>c<span class="token operator">:</span>out<span class="token operator">></span> 标签        向页面输出内容，就像 <span class="token operator">&lt;</span><span class="token operator">%=</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span>out value<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>out<span class="token operator">></span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span>out value<span class="token operator">=</span><span class="token string">"${5+5}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>out<span class="token operator">></span>    <span class="token comment" spellcheck="true">//students是放在request中的List集合,集合里面是Student对象</span>           <span class="token operator">&lt;</span>c<span class="token operator">:</span>out value<span class="token operator">=</span><span class="token string">"${students[2].id}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>out<span class="token operator">></span>    <span class="token operator">&lt;</span>c<span class="token operator">:</span>set<span class="token operator">></span> 标签        向某一个范围对象中存放一个值        <span class="token operator">&lt;</span>c<span class="token operator">:</span>set var<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"jack"</span> scope<span class="token operator">=</span><span class="token string">"request"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>set<span class="token operator">></span>    <span class="token operator">&lt;</span>c<span class="token operator">:</span>remove<span class="token operator">></span> 标签        从一个范围对象中把某个值给移除掉        <span class="token operator">&lt;</span>c<span class="token operator">:</span>remove var<span class="token operator">=</span><span class="token string">"name"</span> scope<span class="token operator">=</span><span class="token string">"request"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span> 标签        条件判断        <span class="token operator">&lt;</span><span class="token operator">%</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${score > 85}"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>font color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token operator">></span>你的分数超过了<span class="token number">85</span>分<span class="token operator">&lt;</span><span class="token operator">/</span>font<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${score > 95}"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>font color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token operator">></span>你的分数超过了<span class="token number">95</span>分<span class="token operator">&lt;</span><span class="token operator">/</span>font<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>           相当于        <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">></span><span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">></span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">catch</span><span class="token operator">></span> 标签        处理产生错误的异常状况，并且将错误信息储存起来        <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">catch</span> var<span class="token operator">=</span><span class="token string">"catchException"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">catch</span><span class="token operator">></span>        <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"${catchException != null}"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>                异常为：$<span class="token punctuation">{</span>catchException<span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>                发生了异常<span class="token operator">:</span> $<span class="token punctuation">{</span>catchException<span class="token punctuation">.</span>message<span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">></span>    <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">import</span><span class="token operator">></span> 标签        和 <span class="token operator">&lt;</span>jsp<span class="token operator">:</span>include<span class="token operator">></span> 的作用基本相同，<span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">import</span><span class="token operator">></span>还可以选择把引入的内容先保存在一个变量         中，之后通过EL表达式在拿出来显示            <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">import</span> url<span class="token operator">=</span><span class="token string">"a.jsp"</span><span class="token operator">/</span><span class="token operator">></span>            或            <span class="token operator">&lt;</span>c<span class="token operator">:</span><span class="token keyword">import</span> var<span class="token operator">=</span><span class="token string">"data"</span> url<span class="token operator">=</span><span class="token string">"a,jsp"</span> <span class="token operator">/</span><span class="token operator">></span>            $<span class="token punctuation">{</span>data<span class="token punctuation">}</span>            <span class="token operator">&lt;</span>c<span class="token operator">:</span>choose<span class="token operator">></span> 标签            <span class="token operator">&lt;</span>c<span class="token operator">:</span>when<span class="token operator">></span> 标签            <span class="token operator">&lt;</span>c<span class="token operator">:</span>otherwise<span class="token operator">></span> 标签            例：            <span class="token operator">&lt;</span>c<span class="token operator">:</span>choose<span class="token operator">></span>                <span class="token operator">&lt;</span>c<span class="token operator">:</span>when test<span class="token operator">=</span><span class="token string">"${score>=90}"</span><span class="token operator">></span>优秀<span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>when<span class="token operator">></span>                <span class="token operator">&lt;</span>c<span class="token operator">:</span>when test<span class="token operator">=</span><span class="token string">"${score>=80}"</span><span class="token operator">></span>良好<span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>when<span class="token operator">></span>                <span class="token operator">&lt;</span>c<span class="token operator">:</span>when test<span class="token operator">=</span><span class="token string">"${score>=70}"</span><span class="token operator">></span>中等<span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>when<span class="token operator">></span>                <span class="token operator">&lt;</span>c<span class="token operator">:</span>when test<span class="token operator">=</span><span class="token string">"${score>=60}"</span><span class="token operator">></span>及格<span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>when<span class="token operator">></span>                <span class="token operator">&lt;</span>c<span class="token operator">:</span>otherwise<span class="token operator">></span>差评<span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>otherwise<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>c<span class="token operator">:</span>choose<span class="token operator">></span>               相当于：            <span class="token keyword">if</span><span class="token punctuation">{</span>score<span class="token operator">>=</span><span class="token number">90</span><span class="token punctuation">}</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token operator">&lt;</span>c<span class="token operator">:</span>redirect<span class="token operator">></span> 标签重定向        <span class="token operator">&lt;</span>c<span class="token operator">:</span>redirect url<span class="token operator">=</span><span class="token string">"a.jsp"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h2 id="13-自定义标签"><a href="#13-自定义标签" class="headerlink" title="13.自定义标签"></a>13.自定义标签</h2><pre class=" language-java"><code class="language-java">    JSP1<span class="token number">.1</span>版本中增加了自定义标签库规范，但是在 JSP1<span class="token number">.1</span>规范中开发自定义标签库比较复杂，JSP2<span class="token number">.0</span> 规范简化了标签库的开发，只需如下几个步骤    ​编写自定义标签处理类    ​建立一个 <span class="token operator">*</span><span class="token punctuation">.</span>tld 文件，每个 <span class="token operator">*</span><span class="token punctuation">.</span>tld 文件对应一个标签库，每个标签库可以对应多个标签，该文件放在      WEB<span class="token operator">-</span>INF下即可    ​在jsp文件中使用taglib指令引入并使用自定义标签    【注意】我们使用的tomcat8<span class="token number">.5</span><span class="token punctuation">.</span><span class="token number">38</span>中实现的是JSP2<span class="token number">.3</span>的规范        ​javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span>tagext<span class="token punctuation">.</span>JspTag接口，所有的标签都需要实现这个接口        ​JSP2<span class="token number">.0</span>版本中，提供了javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span>tagext<span class="token punctuation">.</span>SimpleTagSupport类，我们编写的自             定义标签处理类继承该类即可</code></pre><h3 id="【例1】编写一个标签，可以自动输出hello"><a href="#【例1】编写一个标签，可以自动输出hello" class="headerlink" title="【例1】编写一个标签，可以自动输出hello"></a>【例1】编写一个标签，可以自动输出hello</h3><h4 id="第一步-继承SimpleTagSupport，重写doTag即可"><a href="#第一步-继承SimpleTagSupport，重写doTag即可" class="headerlink" title="第一步    继承SimpleTagSupport，重写doTag即可"></a>第一步    继承SimpleTagSupport，重写doTag即可</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloTag</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleTagSuppport</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JspException<span class="token punctuation">,</span>IOException<span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getJspContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="第二步-编写my-tag-tld文件-名字随意-，存放在WEB-INF下："><a href="#第二步-编写my-tag-tld文件-名字随意-，存放在WEB-INF下：" class="headerlink" title="第二步    编写my-tag.tld文件(名字随意)，存放在WEB-INF下："></a>第二步    编写my-tag.tld文件(名字随意)，存放在WEB-INF下：</h4><pre class=" language-jsp"><code class="language-jsp">    <?xml version="1.0" encoding="ISO-8859-1" ?>    <!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library         1.2//EN" "http://java.sun.com/j2ee/dtd/web-jsptaglibrary_1_2.dtd">    <taglib>      <tlib-version>1.0</tlib-version>      <jsp-version>1.2</jsp-version>      <short-name>my-taglib</short-name>      <uri>briup-taglib</uri>      <tag>        <name>hello</name>        <tag-class>com.briup.test.HelloTag</tag-class>        <body-content>empty</body-content>      </tag>      </taglib></code></pre><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><pre class=" language-java"><code class="language-java">    ​该文件的样例可以在tomcat中的实例项目中复制出来修改        D<span class="token operator">:</span>\apache<span class="token operator">-</span>tomcat<span class="token operator">-</span><span class="token number">8.5</span><span class="token punctuation">.</span><span class="token number">38</span>\webapps\examples\WEB<span class="token operator">-</span>INF\jsp\example<span class="token operator">-</span>taglib<span class="token punctuation">.</span>tld文件    ​<span class="token operator">&lt;</span>body<span class="token operator">-</span>content<span class="token operator">></span>标签中的值，表示自定义标签中body部分可以填写的内容类型，有四种：        ​empty            空标记，即起始标记和结束标记之间没有内容<span class="token operator">&lt;</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>        ​scriptless            接受文本、EL和JSP动作             ​<span class="token function">JSP</span> <span class="token punctuation">(</span>SimpleTagSupport类型不支持<span class="token punctuation">)</span>            接受所有JSP语法，如定制的或内部的tag、scripts、静态HTML、脚本元素、JSP指令和动作        ​tagdependent            标签体内容直接被写入BodyContent，由自定义标签类来进行处理，而不被JSP容器解释</code></pre><h4 id="第三步-jsp页面中引入并使用标签库"><a href="#第三步-jsp页面中引入并使用标签库" class="headerlink" title="第三步    jsp页面中引入并使用标签库"></a>第三步    jsp页面中引入并使用标签库</h4><pre class=" language-xml"><code class="language-xml">    &lt;%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">taglib</span> <span class="token attr-name">uri</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>briup-taglib<span class="token punctuation">"</span></span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>briup<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token doctype">&lt;!DOCTYPE html></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>hello.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">briup:</span>hello</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">briup:</span>hello</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="【例2】编写一个标签，可以自动输出hello并附带上标签体中的内容"><a href="#【例2】编写一个标签，可以自动输出hello并附带上标签体中的内容" class="headerlink" title="【例2】编写一个标签，可以自动输出hello并附带上标签体中的内容"></a>【例2】编写一个标签，可以自动输出hello并附带上标签体中的内容</h3><h4 id="第一步-修改HelloTag类"><a href="#第一步-修改HelloTag类" class="headerlink" title="第一步    修改HelloTag类"></a>第一步    修改HelloTag类</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloTag</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleTagSupport</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JspException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//准备好一个StringWriter，接收标签体内容</span>            StringWriter sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把标签体内容写到StringWriter中</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getJspBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>sw<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从StringWriter中获取标签体的内容</span>            String tagBody <span class="token operator">=</span> sw<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getJspContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello! "</span><span class="token operator">+</span>tagBody<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="第二步-修改my-tag-tld文件"><a href="#第二步-修改my-tag-tld文件" class="headerlink" title="第二步    修改my-tag.tld文件"></a>第二步    修改my-tag.tld文件</h4><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tag</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tag-class</span><span class="token punctuation">></span></span>com.briup.test.HelloTag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tag-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body-content</span><span class="token punctuation">></span></span>scriptless<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body-content</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tag</span><span class="token punctuation">></span></span></code></pre><blockquote><p>【注意】只是修改了<body-content>标签中的值，这里改为scriptless或者tagdependent都是可以的.其他地方不用修改</body-content></p></blockquote><h4 id="第三步-修改jsp文件，添加标签body内容即可"><a href="#第三步-修改jsp文件，添加标签body内容即可" class="headerlink" title="第三步    修改jsp文件，添加标签body内容即可"></a>第三步    修改jsp文件，添加标签body内容即可</h4><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>briup<span class="token operator">:</span>hello<span class="token operator">></span>tom<span class="token operator">&lt;</span><span class="token operator">/</span>briup<span class="token operator">:</span>hello<span class="token operator">></span></code></pre><h3 id="【-例3】-编写一个标签，可以自动输出hello，并附带上标签体中的内容，并且根据标签中属性的值，来确定内容将会输出多少次"><a href="#【-例3】-编写一个标签，可以自动输出hello，并附带上标签体中的内容，并且根据标签中属性的值，来确定内容将会输出多少次" class="headerlink" title="【 例3】    编写一个标签，可以自动输出hello，并附带上标签体中的内容，并且根据标签中属性的值，来确定内容将会输出多少次"></a>【 例3】    编写一个标签，可以自动输出hello，并附带上标签体中的内容，并且根据标签中属性的值，来确定内容将会输出多少次</h3><h4 id="第一步-修改HelloTag类-1"><a href="#第一步-修改HelloTag类-1" class="headerlink" title="第一步    修改HelloTag类"></a>第一步    修改HelloTag类</h4><h5 id="修改1"><a href="#修改1" class="headerlink" title="修改1"></a>修改1</h5><pre class=" language-java"><code class="language-java">添加属性count，提供get<span class="token operator">/</span>set方法，用来接收标签中属性的count属性的值</code></pre><h5 id="修改2"><a href="#修改2" class="headerlink" title="修改2"></a>修改2</h5><pre class=" language-java"><code class="language-java">输出内容语句外面嵌套循环，循环次数由count的值来控制    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloTag</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleTagSupport</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JspException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//准备好一个StringWriter，接收标签体内容</span>            StringWriter sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把标签体内容写到StringWriter中</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getJspBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>sw<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从StringWriter中获取标签体的内容</span>            String tagBody <span class="token operator">=</span> sw<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getJspContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello! "</span><span class="token operator">+</span>tagBody<span class="token operator">+</span><span class="token string">"&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   </code></pre><h4 id="第二步-修改my-tag-tld文件-1"><a href="#第二步-修改my-tag-tld文件-1" class="headerlink" title="第二步    修改my-tag.tld文件"></a>第二步    修改my-tag.tld文件</h4><pre class=" language-xml"><code class="language-xml">修改地方，添加attribute标签来指定属性的相关信息    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tag</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tag-class</span><span class="token punctuation">></span></span>com.briup.test.HelloTag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tag-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body-content</span><span class="token punctuation">></span></span>scriptless<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body-content</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>count<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>required</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>required</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tag</span><span class="token punctuation">></span></span></code></pre><h4 id="第三步-修改jsp文件，添加标签的属性"><a href="#第三步-修改jsp文件，添加标签的属性" class="headerlink" title="第三步    修改jsp文件，添加标签的属性"></a>第三步    修改jsp文件，添加标签的属性</h4><pre class=" language-jsp"><code class="language-jsp">    <briup:hello count="5">tom</briup:hello></code></pre><h3 id="【例4】编写一个标签，可以自动输出hello，并附带上标签体中的内容，并且根据标签中属性的值，来确定内容将会输出多少次，同时标签体值和属性的值都是要EL表达式来表示"><a href="#【例4】编写一个标签，可以自动输出hello，并附带上标签体中的内容，并且根据标签中属性的值，来确定内容将会输出多少次，同时标签体值和属性的值都是要EL表达式来表示" class="headerlink" title="【例4】编写一个标签，可以自动输出hello，并附带上标签体中的内容，并且根据标签中属性的值，来确定内容将会输出多少次，同时标签体值和属性的值都是要EL表达式来表示"></a>【例4】编写一个标签，可以自动输出hello，并附带上标签体中的内容，并且根据标签中属性的值，来确定内容将会输出多少次，同时标签体值和属性的值都是要EL表达式来表示</h3><h4 id="第一步-HelloTag类，和例3保持一致，不需要改动"><a href="#第一步-HelloTag类，和例3保持一致，不需要改动" class="headerlink" title="第一步    HelloTag类，和例3保持一致，不需要改动"></a>第一步    HelloTag类，和例3保持一致，不需要改动</h4><h4 id="第二步-修改my-tag-tld文件-2"><a href="#第二步-修改my-tag-tld文件-2" class="headerlink" title="第二步    修改my-tag.tld文件"></a>第二步    修改my-tag.tld文件</h4><pre class=" language-jsp"><code class="language-jsp">修改地方，添加标签<rtexprvalue>，表示支持EL    rtexprvalue的意思是：Runtime Expression Value    <tag>        <name>hello</name>        <tag-class>com.briup.test.HelloTag</tag-class>        <body-content>scriptless</body-content>        <attribute>            <name>count</name>            <required>true</required>            <rtexprvalue>true</rtexprvalue>        </attribute>    </tag></code></pre><h4 id="第三步-修改jsp文件，添加标签的属性-1"><a href="#第三步-修改jsp文件，添加标签的属性-1" class="headerlink" title="第三步    修改jsp文件，添加标签的属性"></a>第三步    修改jsp文件，添加标签的属性</h4><pre class=" language-jsp"><code class="language-jsp">修改地方，添加了jsp脚本，配合测试    <%        request.setAttribute("name", "zs");        request.setAttribute("count", "10");    %>    <briup:hello count="${count }">${name }</briup:hello></code></pre><p><img src="/2020/11/11/qian-duan-ye-mian/jsp-zong-jie/2.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端页面 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态页面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基本指令</title>
      <link href="2020/06/01/linux/linux-zhong-de-ji-ben-zhi-ling/"/>
      <url>2020/06/01/linux/linux-zhong-de-ji-ben-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="1-了解Linux"><a href="#1-了解Linux" class="headerlink" title="1. 了解Linux"></a>1. 了解Linux</h2><ol><li><strong>Kernel</strong>：可以直接驱动硬件</li><li><strong>Shell</strong>：翻译     </li><li><strong>交换空间</strong>：虚拟内存<ul><li><strong>CPU</strong>：程序必须在CPU中运行</li><li><strong>硬盘</strong>：</li><li><strong>精灵程序/守护程序</strong>：伴随操作系统的开启而开启，伴随操作系统的关闭而关闭</li><li>进入超级管理员身份 <code># sudo passwd</code></li><li>普通用户 <code>$</code></li></ul></li><li><code>Linux</code> 没有盘符概念<ul><li>顶层文件夹 <code>/</code> : 目录 根目录 凡是在跟目录下构建的都是子目录</li><li>路径：<ul><li>相对路径： 以当前路径开头，相对点会改变    <code>./ Desktop</code></li><li>绝对路径： 以根目录 / 开头的路径，相对点不会发生改变。根据自己目前的位置去确定     <code>/home/briup/Desktop</code></li></ul></li></ul></li><li><code>/</code> 有两个含义<ol><li> 如果 <code>/</code> 位于<strong>开头</strong>代表<strong>绝对路径中的根目录</strong></li><li> 如果 <code>/</code> 没有位于第一个位置这时/ 指的是<strong>两个路径之间的间隔</strong></li></ol></li><li><code>dev</code> 设备</li><li><code>adm</code> 管理员<ul><li><code>/opt</code> 第三方软件</li><li><code>/etc</code> 系统配置</li><li><code>/dev</code> 计算机设备文件</li><li><code>/var</code> 针对管理员使用的东西（存放可变信息）</li><li><code>/kernel</code> 内核程序</li><li><code>/home</code> （export）用户专有的东西</li></ul></li></ol><h2 id="2-shell命令的构成"><a href="#2-shell命令的构成" class="headerlink" title="2. shell命令的构成"></a>2. shell命令的构成</h2><ol><li><p>清屏 <code>clear</code></p></li><li><p>以绝对路径的形式显示当前文件夹路径（查看当前位置）<code>pwd</code></p></li><li><p>切换路径</p><pre class=" language-shell"><code class="language-shell">cd         # 切换路径（类似于windows下面的双击进入目录或者是退出一个目录）    cd 绝对路径     # 不管身在何处，直接到达指定位置    cd 相对路径     # 先确定当前位置    cd .             # 当前目录（可以省略.）    cd ..            # 返回上一级目录    cd ../..        # 返回上两级目录    cd ~            # 快速返回家目录    cd /            # 返回根目录</code></pre></li><li><p>查看文件</p><pre class=" language-shell"><code class="language-shell">ls         # 将当前或指定路径下的所有的文件+文件夹显示出来commond + options    ls -a     # 展示所有文件包括隐藏文件    ls -R     # 展示当前文件夹下的文件以及他们的子文件或文件夹    ls -t     # 按照文件创建的时间先后展示文件或文件夹（最后一次修改的时间）    # 查看文件类型        ls -l      # 长列表            # 文件类型 权限 链接号 拥有者 拥有组 文件大小        ls -F     # 用以下方式告诉我们文件类型            / # 目录文件            * # 可执行文件            none（不显示） # 文本文件            @ # 软连接        # 文件类型分类            d # 目录            - # 普通文件    file files     # 查看文件中的内容的类型（形式）</code></pre></li><li><p>文件权限</p><ol><li><p>任何一个文件或者文件夹都具有三种权限</p><ul><li><code>r</code>  读</li><li><code>w</code>  写</li><li><code>x </code>  执行</li></ul></li><li><p>权限是针对三种角色进行的</p><ul><li><p> <code>u</code>   文件拥有者</p></li><li><p> <code>g</code>    文件拥有者的同组人</p></li><li><p> <code>o</code>    其他人</p></li></ul></li><li><p>文件或者文件夹的默认权限</p><ul><li>当我们不设置权限的时候，系统会给我们构建的每一个文件或者是文件夹分配一个默认权限</li><li>系统默认给构建目录分配的权限 775<ul><li><code>u rwx</code></li><li><code>g rwx</code></li><li><code>o r-x</code></li></ul></li><li>系统给构建的文件分配的默认权限 664<ul><li><code>u rw-</code></li><li><code>g rw-</code></li><li><code>o r--</code></li></ul></li></ul></li><li><p>更改文件或者目录的权限</p><ul><li>使用<code>chmod</code>，将已经构建好的文件或者目录的权限进行修改</li><li>查看默认权限 <code>ls -l</code><ul><li> <code>chmod</code> 谁增加或者减少赋值什么权限 文件</li><li> <code>chmod u/g/a/o   +/-/=   r/w/x</code>     文件或目录</li><li><code>chmod u+x，g-r，o=w file</code><ul><li><code>one rwx rwx r-x</code></li><li>使用数字代替一组权限<ul><li><code>r 4，w 2，x 1</code></li><li><code>chmod 777 two</code></li></ul></li></ul></li></ul></li><li>通过修改配置文件的方法将系统默认分配给目录或者文件的权限进行修改</li></ul></li></ol></li><li><p>新建文件 <code>touch</code></p><ul><li>当所在目录中没有文件时touch代表的快速构建新文件</li><li>当touch后面的文件存在的情况下更新文件的最后一次修改时间</li><li><code>touch a.txt</code></li></ul></li><li><p>构建目录 <code>mkdir</code></p><ul><li>在指定位置构建目录,既可以跟绝对路径,也可以跟相对路径</li><li>需求：在已经存在的文件夹下面构建新的文件夹<ul><li>希望在桌面上构建一个test目录<ul><li><code>mkdir /home/briup/Desktop/test</code></li><li><code>mkdir ~/Desktop/test</code></li></ul></li></ul></li><li>直接构建不出来，使用<code>options -p</code> 将前面不存在的目录构建出来<ul><li><code>mkdir -p test/test1/test2/test3</code></li></ul></li></ul></li><li><p>复制文件或目录到指定的位置 <code>cp</code></p><ul><li><p><code>cp file1 file2</code> 复制file1到当前文件夹下然后重命名为file2</p></li><li><p>one 目录存在</p><ul><li><code>cp file1 one/file1</code> 复制 file1到one目录下面并且取名file1</li></ul></li><li><p>one 目录不存在</p><ul><li> <code>cp file1 one</code>  复制file1到当前位置然后重命名为one</li><li><code> cp file one/file2</code> 复制file1到one目录下面并且取名file2</li></ul></li><li><p><code>cp file1 file2 file3 one</code>  将多个文件放置到one目录中<strong>不能把多个文件同时复制和更名</strong></p></li><li><p><code>cp -a</code> 复制文件夹到另一个文件夹</p></li><li><p><code>cp -i a.txt one</code> 提示是否覆盖原有文件（当文件被粘贴的位置中有一个同名文件时，默认是覆盖</p><p> <code>y</code> 覆盖 <code>n</code> 结束</p></li><li><p><code>cp -r</code> 复制目录</p></li><li><p><code>more</code> 查看</p></li></ul></li><li><p>剪切  粘贴  <code>mv</code></p><ul><li>重命名      <code>mv file1 file2</code></li><li>移动文件到目录中<ul><li><code>mv file1 one</code></li><li><code>mv file1 one/file1</code></li><li><code>mv file1 one/fine2</code></li><li><code>mv file1 file2 file3 one</code></li></ul></li><li>移动目录到目录中<ul><li><code>mv dir1 dir2</code></li><li><code>mv dir1 dir2 dir3</code></li></ul></li></ul></li><li><p><code>rm/rmdir</code></p><ul><li>删除文件或者目录<ul><li><code>rm</code> 可删除多个文件</li><li><code>rm -i</code> 删除前给提示</li></ul></li><li>删除目录<ul><li><code>rmdir</code>  只能删除空目录</li><li><code>rm -r </code>  可以删除所有目录（空或非空）</li><li><code>rm -ri</code>  删除目录，删除前提示</li></ul></li></ul></li><li><p><code>man commond</code>   查看某个命令的详细信息</p><ul><li><code>q</code>     退出帮助文档</li><li><code>f</code>    往下翻一页</li><li><code>b</code>    往上翻一页</li><li>/字符串         快速搜索          num 查找第几个<ul><li>man ls</li><li>man cd</li><li>man mv</li></ul></li></ul></li><li><p><code>ping</code>    测试两台计算机之间网络是否连通</p></li><li><p>查询计算机接入网络后的ip</p><ul><li>Linux  Mac  unix 系统下：<code>ifconfig</code></li><li>windows 系统下：<code>ipconfig</code></li></ul></li><li><p><code>data</code>  查看当前日期时间</p></li><li><p><code>cal</code> 查看当前系统默认时间所在月份的日历</p></li><li><p><code>cat file1 [file2]</code>：将一个或者多个文件中的内容一次性全部展示出来（展示是内容）</p></li><li><p><code>more file1 [file2]</code> ：查看多个文件中的内容，但是一次只能展示一页（分屏显示）</p><ul><li><code>b</code>    回退一页</li><li><code>f</code>   前进一页</li><li><code>q</code>   结束查看</li></ul></li><li><p>Linux 任务管理器 <code>htop</code></p></li><li><p>需求：快速清空一个文件 <code>/dev/null</code> （黑洞文件）</p><ul><li>空文件 <code>cat /dev/null &gt; a.txt</code></li></ul></li></ol><h2 id="3-元字符"><a href="#3-元字符" class="headerlink" title="3. 元字符"></a>3. 元字符</h2><ul><li><strong>在我们Linux中具有特殊含义的字符我们一般称为元字符</strong></li></ul><ol><li><p><code>*</code>    匹配 0 到多个任意字符</p><ul><li><code>ls *Test</code> 查看后缀为 Test 的所有的内容</li></ul></li><li><p><code>?</code>   匹配任意一个字符（一般在固定字符长度的情况下使用，指定字符数量）</p></li><li><p><code>;</code>   一行中多个命令的分隔，相当于回车</p><ul><li><code>clear;ls;pwd</code> 先执行 clear ，然后执行 ls ，最后执行 pwd</li></ul></li><li><p><code>|</code>   （管道）把上一个命令的结果当做下一个命令的输入</p></li><li><p><code>&gt;</code>   将前面命令原本输出在 <code>shell</code> 终端界面上的结果重新定向到指定的文件中，但是每一次执行的都是【覆盖】操作</p></li><li><p><code>&gt;&gt;</code>   将原本展示在 <code>shell</code> 终端中的命令执行的结果【追加】到某一个文件中</p><ul><li><code>ls &gt;&gt; a.txt</code> 将 ls 命令中的结果追加到 a.txt 中</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux指令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
